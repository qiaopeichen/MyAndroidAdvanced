/*
	设计模式六大原则：
		单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。
		开放封闭原则：类、模块、函数等应该是可以扩展的。
		里氏替换原则：所有引用父类的地方必须能透明地使用其子类的对象。
		依赖倒置原则：高层模块不应该依赖低层模块，两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。
		迪米特原则：一个软件实体应当尽可能少地与其他实体发生相互作用。
		接口隔离原则：一个类对另一个类的依赖应该建立在最小的接口上。
*/
/*
	设计模式分类：
		创建型设计模式，共5种：单例模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式。
		结构型设计模式，共7种：适配器模式，装饰模式，代理模式，外观模式，桥接模式，组合模式，享元模式。
		行为型设计模式，共11种：策略模式，模板方法模式，观察者模式，迭代器模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式。
*/
